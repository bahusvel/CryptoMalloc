This is the output from etext type tests
program text (etext)        0x40073d
initialized data (edata)    0x601058
uninitialized data (end)    0x601060

This is the output from elf tool:
Entry 0:PHDR vaddr:   0x400040 filesz: 504 memsz: 504 palign: 8 execute read
Entry 1:INTERP vaddr:   0x400238 filesz: 28 memsz: 28 palign: 1 read
Entry 2:LOAD vaddr:   0x400000 filesz: 2404 memsz: 2404 palign: 2097152 execute read
Entry 3:LOAD vaddr:   0x600e10 filesz: 584 memsz: 592 palign: 2097152 read write
Entry 4:DYNAMIC vaddr:   0x600e28 filesz: 464 memsz: 464 palign: 8 read write
Entry 5:NOTE vaddr:   0x400254 filesz: 68 memsz: 68 palign: 4 read
Entry 6:unknown vaddr:   0x400810 filesz: 60 memsz: 60 palign: 4 read
Entry 7:unknown vaddr:      (nil) filesz: 0 memsz: 0 palign: 16 read write
Entry 8:unknown vaddr:   0x600e10 filesz: 496 memsz: 496 palign: 1 read

Entry 2: This is clearly the code, however I cant figure out whats up with its offsets
Adding up the address 0x400000 + 2404 yields 0x400964 which is more than etext... maybe this is page allignment in play?
Nope not really, both of them are not aligned, is there something else hiding at that address, or maybe etext is a lie, after all I did have different results with /proc/self/stat
Well it looks like etext is indeed a lie, I need to have a look at where its defined, but it is clearly bullshit and doesnt add up to anything.

The allignment between the Entry 2 and Entry 3 is interesting which causes them to be 0x200000 apart


Entry 3: is the data, its loaded after the code, and has read write permissions, if you add up 0x600e10 + (decimal)592 you will get 0x601060 which is the "end" section.
Entry 4: overlaps entry 3, and is called dynamic... dont know what that means yet

Section header dump:
Section 1 - .interp size: 28, addr:   0x400238
Section 2 - .note.ABI-tag size: 32, addr:   0x400254
Section 3 - .note.gnu.build-id size: 36, addr:   0x400274
Section 4 - .gnu.hash size: 28, addr:   0x400298
Section 5 - .dynsym size: 384, addr:   0x4002b8
Section 6 - .dynstr size: 195, addr:   0x400438
Section 7 - .gnu.version size: 32, addr:   0x4004fc
Section 8 - .gnu.version_r size: 64, addr:   0x400520
Section 9 - .rela.dyn size: 24, addr:   0x400560
Section 10 - .rela.plt size: 336, addr:   0x400578
Section 11 - .init size: 26, addr:   0x4006c8
Section 12 - .plt size: 240, addr:   0x4006f0
Section 13 - .plt.got size: 8, addr:   0x4007e0
Section 14 - .text size: 2080, addr:   0x4007f0
Section 15 - .fini size: 9, addr:   0x401010
Section 16 - .rodata size: 314, addr:   0x401020
Section 17 - .eh_frame_hdr size: 76, addr:   0x40115c
Section 18 - .eh_frame size: 348, addr:   0x4011a8
Section 19 - .init_array size: 8, addr:   0x601e10
Section 20 - .fini_array size: 8, addr:   0x601e18
Section 21 - .jcr size: 8, addr:   0x601e20
Section 22 - .dynamic size: 464, addr:   0x601e28
Section 23 - .got size: 8, addr:   0x601ff8
Section 24 - .got.plt size: 136, addr:   0x602000
Section 25 - .data size: 24, addr:   0x602088
Section 26 - .bss size: 8, addr:   0x6020a0
Section 27 - .comment size: 47, addr:      (nil)
Section 28 - .shstrtab size: 268, addr:      (nil)
Section 29 - .symtab size: 2088, addr:      (nil)
Section 30 - .strtab size: 854, addr:      (nil)

Judging by the dump of the section headers, I cant simply encrypt starting from 0x400000, as it contains some other data that is not just machine code
I think before encrypting (even dynamically) I will need to analyze the elf file, like right now, and find the address of only the .text section.
So it seems that etext variable and /proc/self/stat are different because they report different things really, so they are both bullshit and only one that is right is the elf file itself
Adding up 0x4007f0 + 2080 = 0x401010, which is the starting address of .fini section, which lasts for 9 bytes, giving 0x401019 which is address of the etext variable!!!
Which makes sense, as apparently .init and .fini are sections whose code is executed prior to and after the main() respectively, so these sections should not be encrypted!
